name: Release & Dockerize

on:
  push:
    branches: [main, staging]

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - id: version
      run: |
        CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[0].version')
        
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          ((VERSION_PARTS[2]++))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}"
        else
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          ((VERSION_PARTS[2]++))
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.${VERSION_PARTS[2]}-stg"
        fi
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in Cargo.toml
      if: github.ref == 'refs/heads/main'
      run: |
        VERSION=${{ steps.version.outputs.version }}
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
        git add Cargo.toml
        git commit -m "Update Cargo.toml version to $VERSION"
        git push

    - name: Build release
      run: cargo build --release
        
    - name: Check binaries
      run: |
        if [ ! -f "target/release/sophon-node" ] || [ ! -f "target/release/generate_node_id" ]; then
            echo "Error: Required binaries not found in target/release/"
            exit 1
        fi
        
    - name: Create tarball
      run: |
        VERSION=${{ steps.version.outputs.version }}
        mkdir -p release
        cp target/release/sophon-node release/
        cp target/release/generate_node_id release/
        cd release/
        tar -czf "../binaries-v${VERSION}.tar.gz" *
        cd ..
        
    - name: Create Git Tag
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        # check if tag exists
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists, skipping tag creation"
          exit 0
        else
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
        fi

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: ${{ github.ref != 'refs/heads/main' }}
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./binaries-v${{ steps.version.outputs.version }}.tar.gz
        asset_name: binaries-v${{ steps.version.outputs.version }}.tar.gz
        asset_content_type: application/gzip

    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - uses: docker/setup-buildx-action@v2

    - name: Build and Push to Dockerhub
      run: |
        VERSION=${{ steps.version.outputs.version }}
        
        if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
          docker build --build-arg BUILD_TYPE=prod --platform linux/amd64 \
            -t sophonhub/sophon-light-node:v${VERSION} \
            -t sophonhub/sophon-light-node:latest .
          docker push sophonhub/sophon-light-node:v${VERSION}
          docker push sophonhub/sophon-light-node:latest
        else
          docker build --build-arg BUILD_TYPE=stg --platform linux/amd64 \
            -t sophonhub/sophon-light-node:v${VERSION} \
            -t sophonhub/sophon-light-node:latest-stg .
          docker push sophonhub/sophon-light-node:v${VERSION}
          docker push sophonhub/sophon-light-node:latest-stg
        fi