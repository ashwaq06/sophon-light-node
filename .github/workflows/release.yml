name: Release

on:
  push:
    branches:
      - main

jobs:

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        
    - name: Get version from Cargo.toml
      id: cargo_toml
      run: |
        version=$(sed -n 's/^version = "\([^"]*\)"/\1/p' Cargo.toml)
        echo "CURRENT_VERSION=$version" >> $GITHUB_OUTPUT

    - name: Update version in Cargo.toml
      run: |
        VERSION=${{ env.CURRENT_VERSION }}
        sed -i "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

    - name: Commit Cargo.toml update
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@github.com"
        git add Cargo.toml
        git commit -m "Update Cargo.toml version to ${{ env.CURRENT_VERSION }}"
        git push

    - name: Create Git Tag
      run: |
        VERSION=${{ env.CURRENT_VERSION }}
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"

    - name: Build release
      run: |
        cargo build --release
        
    - name: Check binaries
      run: |
        if [ ! -f "target/release/sophon-node" ] || [ ! -f "target/release/generate_node_id" ]; then
            echo "Error: Required binaries not found in target/release/"
            exit 1
        fi
        
    - name: Create tarball
      run: |
        VERSION=${{ env.CURRENT_VERSION }}
        mkdir -p release
        cp target/release/sophon-node release/
        cp target/release/generate_node_id release/
        cd release/
        tar -czf "../binaries-$VERSION.tar.gz" *
        cd ..
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.CURRENT_VERSION }}
        release_name: Release ${{ env.CURRENT_VERSION }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./binaries-${{ en